/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.micro.maintainance.decision.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.micro.maintainance.decision.model.DecisionEntry;
import com.liferay.micro.maintainance.decision.model.DecisionEntryModel;
import com.liferay.micro.maintainance.decision.model.DecisionEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DecisionEntry service. Represents a row in the &quot;Decision_DecisionEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DecisionEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DecisionEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DecisionEntryImpl
 * @see DecisionEntry
 * @see DecisionEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DecisionEntryModelImpl extends BaseModelImpl<DecisionEntry>
	implements DecisionEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a decision entry model instance should use the {@link DecisionEntry} interface instead.
	 */
	public static final String TABLE_NAME = "Decision_DecisionEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "decisionEntryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "analysisData", Types.VARCHAR },
			{ "wikiPageId", Types.BIGINT },
			{ "wikiPageName", Types.VARCHAR },
			{ "outcome", Types.VARCHAR },
			{ "handled", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("decisionEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("analysisData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wikiPageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("wikiPageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("outcome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handled", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Decision_DecisionEntry (uuid_ VARCHAR(75) null,decisionEntryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,analysisData VARCHAR(75) null,wikiPageId LONG,wikiPageName VARCHAR(75) null,outcome VARCHAR(75) null,handled BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Decision_DecisionEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY decisionEntry.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Decision_DecisionEntry.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.micro.maintainance.decision.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.micro.maintainance.decision.model.DecisionEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.micro.maintainance.decision.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.micro.maintainance.decision.model.DecisionEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.micro.maintainance.decision.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.micro.maintainance.decision.model.DecisionEntry"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long DECISIONENTRYID_COLUMN_BITMASK = 2L;
	public static final long HANDLED_COLUMN_BITMASK = 4L;
	public static final long OUTCOME_COLUMN_BITMASK = 8L;
	public static final long USERID_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long WIKIPAGEID_COLUMN_BITMASK = 64L;
	public static final long WIKIPAGENAME_COLUMN_BITMASK = 128L;
	public static final long CREATEDATE_COLUMN_BITMASK = 256L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DecisionEntry toModel(DecisionEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DecisionEntry model = new DecisionEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setDecisionEntryId(soapModel.getDecisionEntryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAnalysisData(soapModel.getAnalysisData());
		model.setWikiPageId(soapModel.getWikiPageId());
		model.setWikiPageName(soapModel.getWikiPageName());
		model.setOutcome(soapModel.getOutcome());
		model.setHandled(soapModel.getHandled());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DecisionEntry> toModels(DecisionEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DecisionEntry> models = new ArrayList<DecisionEntry>(soapModels.length);

		for (DecisionEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.micro.maintainance.decision.service.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.micro.maintainance.decision.model.DecisionEntry"));

	public DecisionEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _decisionEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDecisionEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _decisionEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DecisionEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DecisionEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("decisionEntryId", getDecisionEntryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("analysisData", getAnalysisData());
		attributes.put("wikiPageId", getWikiPageId());
		attributes.put("wikiPageName", getWikiPageName());
		attributes.put("outcome", getOutcome());
		attributes.put("handled", getHandled());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long decisionEntryId = (Long)attributes.get("decisionEntryId");

		if (decisionEntryId != null) {
			setDecisionEntryId(decisionEntryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String analysisData = (String)attributes.get("analysisData");

		if (analysisData != null) {
			setAnalysisData(analysisData);
		}

		Long wikiPageId = (Long)attributes.get("wikiPageId");

		if (wikiPageId != null) {
			setWikiPageId(wikiPageId);
		}

		String wikiPageName = (String)attributes.get("wikiPageName");

		if (wikiPageName != null) {
			setWikiPageName(wikiPageName);
		}

		String outcome = (String)attributes.get("outcome");

		if (outcome != null) {
			setOutcome(outcome);
		}

		Boolean handled = (Boolean)attributes.get("handled");

		if (handled != null) {
			setHandled(handled);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getDecisionEntryId() {
		return _decisionEntryId;
	}

	@Override
	public void setDecisionEntryId(long decisionEntryId) {
		_columnBitmask |= DECISIONENTRYID_COLUMN_BITMASK;

		if (!_setOriginalDecisionEntryId) {
			_setOriginalDecisionEntryId = true;

			_originalDecisionEntryId = _decisionEntryId;
		}

		_decisionEntryId = decisionEntryId;
	}

	public long getOriginalDecisionEntryId() {
		return _originalDecisionEntryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAnalysisData() {
		if (_analysisData == null) {
			return StringPool.BLANK;
		}
		else {
			return _analysisData;
		}
	}

	@Override
	public void setAnalysisData(String analysisData) {
		_analysisData = analysisData;
	}

	@JSON
	@Override
	public long getWikiPageId() {
		return _wikiPageId;
	}

	@Override
	public void setWikiPageId(long wikiPageId) {
		_columnBitmask |= WIKIPAGEID_COLUMN_BITMASK;

		if (!_setOriginalWikiPageId) {
			_setOriginalWikiPageId = true;

			_originalWikiPageId = _wikiPageId;
		}

		_wikiPageId = wikiPageId;
	}

	public long getOriginalWikiPageId() {
		return _originalWikiPageId;
	}

	@JSON
	@Override
	public String getWikiPageName() {
		if (_wikiPageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _wikiPageName;
		}
	}

	@Override
	public void setWikiPageName(String wikiPageName) {
		_columnBitmask |= WIKIPAGENAME_COLUMN_BITMASK;

		if (_originalWikiPageName == null) {
			_originalWikiPageName = _wikiPageName;
		}

		_wikiPageName = wikiPageName;
	}

	public String getOriginalWikiPageName() {
		return GetterUtil.getString(_originalWikiPageName);
	}

	@JSON
	@Override
	public String getOutcome() {
		if (_outcome == null) {
			return StringPool.BLANK;
		}
		else {
			return _outcome;
		}
	}

	@Override
	public void setOutcome(String outcome) {
		_columnBitmask |= OUTCOME_COLUMN_BITMASK;

		if (_originalOutcome == null) {
			_originalOutcome = _outcome;
		}

		_outcome = outcome;
	}

	public String getOriginalOutcome() {
		return GetterUtil.getString(_originalOutcome);
	}

	@JSON
	@Override
	public boolean getHandled() {
		return _handled;
	}

	@JSON
	@Override
	public boolean isHandled() {
		return _handled;
	}

	@Override
	public void setHandled(boolean handled) {
		_columnBitmask |= HANDLED_COLUMN_BITMASK;

		if (!_setOriginalHandled) {
			_setOriginalHandled = true;

			_originalHandled = _handled;
		}

		_handled = handled;
	}

	public boolean getOriginalHandled() {
		return _originalHandled;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DecisionEntry.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DecisionEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DecisionEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DecisionEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DecisionEntryImpl decisionEntryImpl = new DecisionEntryImpl();

		decisionEntryImpl.setUuid(getUuid());
		decisionEntryImpl.setDecisionEntryId(getDecisionEntryId());
		decisionEntryImpl.setCompanyId(getCompanyId());
		decisionEntryImpl.setUserId(getUserId());
		decisionEntryImpl.setUserName(getUserName());
		decisionEntryImpl.setCreateDate(getCreateDate());
		decisionEntryImpl.setModifiedDate(getModifiedDate());
		decisionEntryImpl.setAnalysisData(getAnalysisData());
		decisionEntryImpl.setWikiPageId(getWikiPageId());
		decisionEntryImpl.setWikiPageName(getWikiPageName());
		decisionEntryImpl.setOutcome(getOutcome());
		decisionEntryImpl.setHandled(getHandled());

		decisionEntryImpl.resetOriginalValues();

		return decisionEntryImpl;
	}

	@Override
	public int compareTo(DecisionEntry decisionEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				decisionEntry.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DecisionEntry)) {
			return false;
		}

		DecisionEntry decisionEntry = (DecisionEntry)obj;

		long primaryKey = decisionEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DecisionEntryModelImpl decisionEntryModelImpl = this;

		decisionEntryModelImpl._originalUuid = decisionEntryModelImpl._uuid;

		decisionEntryModelImpl._originalDecisionEntryId = decisionEntryModelImpl._decisionEntryId;

		decisionEntryModelImpl._setOriginalDecisionEntryId = false;

		decisionEntryModelImpl._originalCompanyId = decisionEntryModelImpl._companyId;

		decisionEntryModelImpl._setOriginalCompanyId = false;

		decisionEntryModelImpl._originalUserId = decisionEntryModelImpl._userId;

		decisionEntryModelImpl._setOriginalUserId = false;

		decisionEntryModelImpl._setModifiedDate = false;

		decisionEntryModelImpl._originalWikiPageId = decisionEntryModelImpl._wikiPageId;

		decisionEntryModelImpl._setOriginalWikiPageId = false;

		decisionEntryModelImpl._originalWikiPageName = decisionEntryModelImpl._wikiPageName;

		decisionEntryModelImpl._originalOutcome = decisionEntryModelImpl._outcome;

		decisionEntryModelImpl._originalHandled = decisionEntryModelImpl._handled;

		decisionEntryModelImpl._setOriginalHandled = false;

		decisionEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DecisionEntry> toCacheModel() {
		DecisionEntryCacheModel decisionEntryCacheModel = new DecisionEntryCacheModel();

		decisionEntryCacheModel.uuid = getUuid();

		String uuid = decisionEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			decisionEntryCacheModel.uuid = null;
		}

		decisionEntryCacheModel.decisionEntryId = getDecisionEntryId();

		decisionEntryCacheModel.companyId = getCompanyId();

		decisionEntryCacheModel.userId = getUserId();

		decisionEntryCacheModel.userName = getUserName();

		String userName = decisionEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			decisionEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			decisionEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			decisionEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			decisionEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			decisionEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		decisionEntryCacheModel.analysisData = getAnalysisData();

		String analysisData = decisionEntryCacheModel.analysisData;

		if ((analysisData != null) && (analysisData.length() == 0)) {
			decisionEntryCacheModel.analysisData = null;
		}

		decisionEntryCacheModel.wikiPageId = getWikiPageId();

		decisionEntryCacheModel.wikiPageName = getWikiPageName();

		String wikiPageName = decisionEntryCacheModel.wikiPageName;

		if ((wikiPageName != null) && (wikiPageName.length() == 0)) {
			decisionEntryCacheModel.wikiPageName = null;
		}

		decisionEntryCacheModel.outcome = getOutcome();

		String outcome = decisionEntryCacheModel.outcome;

		if ((outcome != null) && (outcome.length() == 0)) {
			decisionEntryCacheModel.outcome = null;
		}

		decisionEntryCacheModel.handled = getHandled();

		return decisionEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", decisionEntryId=");
		sb.append(getDecisionEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", analysisData=");
		sb.append(getAnalysisData());
		sb.append(", wikiPageId=");
		sb.append(getWikiPageId());
		sb.append(", wikiPageName=");
		sb.append(getWikiPageName());
		sb.append(", outcome=");
		sb.append(getOutcome());
		sb.append(", handled=");
		sb.append(getHandled());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.micro.maintainance.decision.model.DecisionEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>decisionEntryId</column-name><column-value><![CDATA[");
		sb.append(getDecisionEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analysisData</column-name><column-value><![CDATA[");
		sb.append(getAnalysisData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wikiPageId</column-name><column-value><![CDATA[");
		sb.append(getWikiPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wikiPageName</column-name><column-value><![CDATA[");
		sb.append(getWikiPageName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outcome</column-name><column-value><![CDATA[");
		sb.append(getOutcome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handled</column-name><column-value><![CDATA[");
		sb.append(getHandled());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DecisionEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DecisionEntry.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _decisionEntryId;
	private long _originalDecisionEntryId;
	private boolean _setOriginalDecisionEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _analysisData;
	private long _wikiPageId;
	private long _originalWikiPageId;
	private boolean _setOriginalWikiPageId;
	private String _wikiPageName;
	private String _originalWikiPageName;
	private String _outcome;
	private String _originalOutcome;
	private boolean _handled;
	private boolean _originalHandled;
	private boolean _setOriginalHandled;
	private long _columnBitmask;
	private DecisionEntry _escapedModel;
}